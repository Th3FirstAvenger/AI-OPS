"""
This module provides a class to interact with the Exploit Database (Exploit-DB)
website using Playwright for automated web browsing. It allows users to search
for exploits and retrieve their titles and URLs.

> Required: `playwright install firefox`
"""
from typing import Tuple

from playwright.sync_api import sync_playwright


class ExploitDB:
    """
    A class to search exploits in the Exploit Database.

    This class uses Playwright to automate browsing the Exploit-DB website,
    allowing users to search for exploits and retrieve their details.

    Methods:
        - __enter__: Initializes the browser context in a 'with' statement.
        - __exit__: Closes the browser context when done.
        - init: Initializes Playwright and navigates to the Exploit-DB.
        - close: Closes the browser, context, and Playwright.
        - search: Searches for exploits matching the query string.

    Example:
        >>> with ExploitDB() as exploit_db:
        >>>     results = exploit_db.search("apache tomcat")
        >>>     for title, url in results:
        >>>         print(f"Title: {title}, URL: {url}")
    """

    def __init__(self):
        self.__base_url = 'https://www.exploit-db.com/'
        self.__pw_context = None
        self.__browser = None
        self.__context = None
        self.__page = None
        self.__search = None

    def __enter__(self):
        self.init()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
        if exc_type is not None:
            raise RuntimeError("Error in the ExploitDB.") from exc_val
        return False

    def init(self):
        """Initializes Playwright and browses to ExploitDB"""
        self.__pw_context = sync_playwright().start()
        self.__browser = self.__pw_context.firefox.launch()
        self.__context = self.__browser.new_context()
        self.__page = self.__context.new_page()
        self.__page.goto(self.__base_url)
        self.__page.wait_for_selector("div[id=exploits-table_filter]")
        self.__search = self.__page.locator("div[id=exploits-table_filter] input[type='search']")

    def close(self):
        """Closes Playwright resources"""
        if self.__page:
            self.__page.close()
        if self.__context:
            self.__context.close()
        if self.__browser:
            self.__browser.close()
        if self.__pw_context:
            self.__pw_context.stop()

    def search(self, query: str) -> list[Tuple]:
        """
        Searches for exploits based on the provided query string.

        :param query: The search term to find exploits.
        :returns:
                A list of tuples containing the title and URL of each exploit
                found. Each tuple is in the format (title, url).
        """
        self.__search.fill(query)
        self.__search.press("Enter")
        self.__page.wait_for_selector("table#exploits-table tbody tr")

        results = []
        rows_count = self.__page.locator(
            "table#exploits-table tbody tr"
        ).count()

        for i in range(rows_count):
            # fifth td contains title and url
            selector = f"table#exploits-table tbody tr:nth-child({i + 1}) td:nth-child(5) a"
            fifth_column = self.__page.locator(selector)

            if fifth_column.count() > 0:
                title = fifth_column.inner_text()
                url = fifth_column.get_attribute("href")
                results.append((title, f'{self.__base_url}{url[1:]}'))

        return results


if __name__ == "__main__":
    # with ExploitDB() as exp_db:
    #     res = exp_db.search('phpmyadmin')
    # print(f'\n'.join([f'{title}: {url}' for title, url in res]))
    pass
