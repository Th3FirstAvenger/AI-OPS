digraph "classes" {
rankdir=BT
charset="utf-8"
"src.agent.agent.Agent" [color="black", fontcolor="black", label=<{Agent|llm<br ALIGN="LEFT"/>mem<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>system_plan_con<br ALIGN="LEFT"/>system_plan_gen<br ALIGN="LEFT"/>tool_registry : ToolRegistry \| None<br ALIGN="LEFT"/>tools : list<br ALIGN="LEFT"/>user_plan_con<br ALIGN="LEFT"/>user_plan_gen<br ALIGN="LEFT"/>|delete_session(sid: int)<br ALIGN="LEFT"/>execute_plan(sid)<br ALIGN="LEFT"/>extract_plan(plan_nl)<br ALIGN="LEFT"/>get_session(sid: int)<br ALIGN="LEFT"/>get_sessions()<br ALIGN="LEFT"/>invoke_tools(tool_response)<br ALIGN="LEFT"/>new_session(sid: int)<br ALIGN="LEFT"/>query(sid: int, user_in: str)<br ALIGN="LEFT"/>rename_session(sid: int, session_name: str)<br ALIGN="LEFT"/>save_session(sid: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.knowledge.collections.Collection" [color="black", fontcolor="black", label=<{Collection|collection_id : int<br ALIGN="LEFT"/>documents : List[Document]<br ALIGN="LEFT"/>size : Optional[int]<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>topics : List[Topic]<br ALIGN="LEFT"/>|document_names(): list<br ALIGN="LEFT"/>from_dict(collection_title: str, data: list)<br ALIGN="LEFT"/>from_json(path: str)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json_metadata(path: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.knowledge.collections.Document" [color="black", fontcolor="black", label=<{Document|content : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>topic : Optional[Topic]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.tools.search.exploit_db.ExploitDB" [color="black", fontcolor="black", label=<{ExploitDB|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>search(query: str): list[Tuple]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.llm.llm.LLM" [color="black", fontcolor="black", label=<{LLM|api_key : str \| None<br ALIGN="LEFT"/>inference_endpoint : str<br ALIGN="LEFT"/>model : str<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>|query(messages: list): Tuple[str, int]<br ALIGN="LEFT"/>tool_query(messages: list, tools: list \| None)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.memory.base.Memory" [color="black", fontcolor="black", label=<{Memory|sessions : Dict[int:Session]<br ALIGN="LEFT"/>|delete_session(sid: int)<br ALIGN="LEFT"/>get_plan(sid)<br ALIGN="LEFT"/>get_session(sid: int): Session<br ALIGN="LEFT"/>get_sessions(): dict<br ALIGN="LEFT"/>load_sessions()<br ALIGN="LEFT"/>rename_session(sid: int, session_name: str)<br ALIGN="LEFT"/>save_session(sid: int)<br ALIGN="LEFT"/>store_message(sid: int, message: Message)<br ALIGN="LEFT"/>store_plan(sid: int, plan: Plan)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.memory.base.Message" [color="black", fontcolor="black", label=<{Message|content : str<br ALIGN="LEFT"/>role<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.llm.llm.Ollama" [color="black", fontcolor="black", label=<{Ollama|client : Client \| None<br ALIGN="LEFT"/>|query(messages: list): Tuple[str, int]<br ALIGN="LEFT"/>tool_query(messages: list, tools: list \| None)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.plan.Plan" [color="black", fontcolor="black", label=<{Plan|tasks : list[Task]<br ALIGN="LEFT"/>|execute()<br ALIGN="LEFT"/>plan_to_dict_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.llm.llm.Provider" [color="black", fontcolor="black", label=<{Provider|api_key : str \| None<br ALIGN="LEFT"/>inference_endpoint : str<br ALIGN="LEFT"/>model : str<br ALIGN="LEFT"/>|<I>query</I>(messages: list): Tuple[str, Tuple]<br ALIGN="LEFT"/><I>tool_query</I>(messages: list, tools: list \| None)<br ALIGN="LEFT"/>verify_messages_format(messages: list[dict])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.llm.llm.ProviderError" [color="black", fontcolor="red", label=<{ProviderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.memory.base.Role" [color="black", fontcolor="black", label=<{Role|name<br ALIGN="LEFT"/>|from_str(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.memory.base.Session" [color="black", fontcolor="black", label=<{Session|message_dict<br ALIGN="LEFT"/>messages : List[Message]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>plans<br ALIGN="LEFT"/>tokens<br ALIGN="LEFT"/>|add_message(message: Message)<br ALIGN="LEFT"/>add_plan(plan: Plan)<br ALIGN="LEFT"/>from_json(path: str)<br ALIGN="LEFT"/>plans_to_dict_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.knowledge.store.Store" [color="black", fontcolor="black", label=<{Store|collections<br ALIGN="LEFT"/>in_memory : bool<br ALIGN="LEFT"/>|create_collection(collection: Collection, progress_bar: bool)<br ALIGN="LEFT"/>get_available_collections(): Optional[dict[str, Collection]]<br ALIGN="LEFT"/>get_available_datasets(): list[Collection]<br ALIGN="LEFT"/>get_collection(name)<br ALIGN="LEFT"/>retrieve_from(query: str, collection_name: str, limit: int, threshold: int): list[str] \| None<br ALIGN="LEFT"/>save_metadata(collection: Collection)<br ALIGN="LEFT"/>upload(document: Document, collection_name: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.plan.Task" [color="black", fontcolor="black", label=<{Task|command : str<br ALIGN="LEFT"/>output : str<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>thought : str<br ALIGN="LEFT"/>tool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.plan.TaskStatus" [color="black", fontcolor="black", label=<{TaskStatus|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.tools.base.Terminal" [color="black", fontcolor="black", label=<{Terminal|SHELLS : dict<br ALIGN="LEFT"/>args_description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>proc : Popen<br ALIGN="LEFT"/>reader_output : Queue<br ALIGN="LEFT"/>tool_description : str<br ALIGN="LEFT"/>use_case : str<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>run(command: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.tools.base.Tool" [color="black", fontcolor="black", label=<{Tool|args_description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>tool_description : str<br ALIGN="LEFT"/>use_case : str<br ALIGN="LEFT"/>|get_documentation()<br ALIGN="LEFT"/>load_tool(path: str)<br ALIGN="LEFT"/><I>run</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agent.knowledge.collections.Topic" [color="black", fontcolor="black", label=<{Topic|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agent.llm.llm.Ollama" -> "src.agent.llm.llm.Provider" [arrowhead="empty", arrowtail="none"];
"src.agent.llm.llm.Provider" -> "src.agent.llm.llm.LLM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"src.agent.memory.base.Memory" -> "src.agent.agent.Agent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mem", style="solid"];
"src.agent.memory.base.Role" -> "src.agent.memory.base.Message" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="role", style="solid"];
"src.agent.plan.TaskStatus" -> "src.agent.plan.Task" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"src.agent.tools.base.Tool" -> "src.agent.plan.Task" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tool", style="solid"];
"src.agent.llm.llm.LLM" -> "src.agent.agent.Agent" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="llm", style="solid"];
}
